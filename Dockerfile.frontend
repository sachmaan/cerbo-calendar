FROM node:16-alpine as build

WORKDIR /app

# Copy package files first to leverage Docker cache
COPY frontend/package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the frontend application
COPY frontend/ ./

# Build the React app
RUN npm run build

# Stage 2: Serve the React app using nginx
FROM nginx:alpine

# Copy the build output to replace the default nginx contents
COPY --from=build /app/build /usr/share/nginx/html

# Create a script to generate runtime config and configure nginx
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'set -e' >> /docker-entrypoint.sh && \
    echo 'echo "Generating runtime configuration..."' >> /docker-entrypoint.sh && \
    echo 'echo "window.ENV = { API_URL: \"/api\" };" > /usr/share/nginx/html/config.js' >> /docker-entrypoint.sh && \
    echo 'echo "Configuring nginx..."' >> /docker-entrypoint.sh && \
    echo 'envsubst < /etc/nginx/conf.d/default.template > /etc/nginx/conf.d/default.conf' >> /docker-entrypoint.sh && \
    echo 'echo "Starting nginx..."' >> /docker-entrypoint.sh && \
    echo 'exec nginx -g "daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Create nginx config template with environment variable substitution
RUN echo 'server {' > /etc/nginx/conf.d/default.template && \
    echo '    listen ${PORT:-80};' >> /etc/nginx/conf.d/default.template && \
    echo '    server_name localhost;' >> /etc/nginx/conf.d/default.template && \
    echo '    root /usr/share/nginx/html;' >> /etc/nginx/conf.d/default.template && \
    echo '    index index.html;' >> /etc/nginx/conf.d/default.template && \
    echo '' >> /etc/nginx/conf.d/default.template && \
    echo '    # API proxy' >> /etc/nginx/conf.d/default.template && \
    echo '    location /api/ {' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_pass ${BACKEND_API_URL:-http://backend:3001/api/};' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_http_version 1.1;' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_set_header Upgrade $http_upgrade;' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_set_header Connection "upgrade";' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/default.template && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/default.template && \
    echo '    }' >> /etc/nginx/conf.d/default.template && \
    echo '' >> /etc/nginx/conf.d/default.template && \
    echo '    # React router support' >> /etc/nginx/conf.d/default.template && \
    echo '    location / {' >> /etc/nginx/conf.d/default.template && \
    echo '        try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/default.template && \
    echo '    }' >> /etc/nginx/conf.d/default.template && \
    echo '}' >> /etc/nginx/conf.d/default.template

# Install envsubst for environment variable substitution
RUN apk add --no-cache gettext

# Set default port but allow override
ENV PORT=80

# Expose the port
EXPOSE $PORT

# Use our custom entrypoint script
CMD ["/docker-entrypoint.sh"]
