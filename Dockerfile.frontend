FROM node:16-alpine as build

WORKDIR /app

# Copy package files first to leverage Docker cache
COPY frontend/package*.json ./
RUN npm install

# Copy the rest of the frontend application
COPY frontend/ ./

# Build-time ARG that can be overridden during build
ARG REACT_APP_API_URL=http://localhost:3001/api

# Set as environment variable for the build process
ENV REACT_APP_API_URL=$REACT_APP_API_URL

# Build the React app
RUN npm run build

# Stage 2: Serve the React app using a lightweight nginx server
FROM nginx:alpine

# Copy the build output to replace the default nginx contents
COPY --from=build /app/build /usr/share/nginx/html

# Copy custom nginx config to handle React Router
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create a script that replaces API_URL in the built JS files at runtime
RUN echo '#!/bin/sh' > /usr/share/nginx/html/env-config.sh && \
    echo 'echo "Configuring environment variables..."' >> /usr/share/nginx/html/env-config.sh && \
    echo 'find /usr/share/nginx/html -type f -name "*.js" -exec sed -i "s|RUNTIME_API_URL|${API_URL}|g" {} \;' >> /usr/share/nginx/html/env-config.sh && \
    echo 'echo "Starting nginx..."' >> /usr/share/nginx/html/env-config.sh && \
    echo 'exec nginx -g "daemon off;"' >> /usr/share/nginx/html/env-config.sh && \
    chmod +x /usr/share/nginx/html/env-config.sh

# Set a default API URL that can be overridden at runtime
ENV API_URL=http://localhost:3001/api

# Use the environment variable script as the entry point
CMD ["/usr/share/nginx/html/env-config.sh"]
